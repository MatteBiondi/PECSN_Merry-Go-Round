[General]
seed-set = ${repetition}
simtime-resolution = us

# Represents the time after which children start ot get tired of standing in queues.
# Respectively, in seconds, {3, 5, 7, 10, 12, 15} minutes
#**.childPool.Q 		= ${180, 300, 420, 600, 720, 900} 

# The mean of exponential distribution ( unit of time [seconds] for dropping queue)
#**.childPool.Delta	= 300

# Represents {3, 0.75, 0.5} arrival(s) at minute. The mean of exponential distribution 
# ( unit of time [seconds] for next arrival, a.k.a inter-arrival time )
#**.childPool.Lambda	= ${20, 80, 120}	

# Prob. of success. Mean = {1, 4} people at each arrival
#**.childPool.P		= ${1, 1/4} 

# Threshold to start the Merry-Go-Round when it is not full
#**.owner.v_fraction = ${0.25, 0.50, 0.75, 1}

# Number of seats of the Merry-Go-Round 
#**.owner.N 			= 24

# Number of coin(s) earned for each child who enjoys a ride
#**.owner.c 			= ${1, 1.5, 2}

# Time duration of one Merry-Go-Round ride
#**.merryGoRound.T 	= ${120, 180, 240, 300}


#--------------------------------------------------------------------------------------------
#VALIDATION CONFIGURATIONS
#--------------------------------------------------------------------------------------------

#-------------------------
#Deterministic test
#-------------------------
[Config Validation_deterministic_test]
network = ValidationNetwork
sim-time-limit = 3720s
repeat = 1
record-eventlog = true

# Represents the time after which children start ot get tired of standing in queues.
**.dummyChildPool.Q 		= 3720

# Time between two arrivals [seconds]
**.dummyChildPool.interarrivalTime = 10

# Children group size
**.dummyChildPool.bulk = 1

# Threshold to start the Merry-Go-Round when it is not full
**.owner.v_fraction = ${vFraction = 0.5, 1}

# Number of seats of the Merry-Go-Round 
**.owner.N 			= 24

# Number of coin(s) earned for each child who enjoys a ride
**.owner.c 			= 1

# Time duration of one Merry-Go-Round ride
**.merryGoRound.T 	= 120


#-------------------------
#Base test configuration
#------------------------- 
[Config Validation]
network = MGR_Network
sim-time-limit = 700h
repeat = 10

# Represents the time after which children start ot get tired of standing in queues.
**.childPool.Q 		= 300

# The mean of exponential distribution ( unit of time [seconds] for dropping queue)
**.childPool.Delta	= 300

# Represents 3 arrivals at minute. The mean of exponential distribution 
# ( unit of time [seconds] for next arrival, a.k.a inter-arrival time )
**.childPool.Lambda	= 20	

# Prob. of success. Mean = 1 people at each arrival
**.childPool.P		= 1

# Threshold to start the Merry-Go-Round when it is not full
**.owner.v_fraction = 1

# Number of seats of the Merry-Go-Round 
**.owner.N 			= 24

# Number of coin(s) earned for each child who enjoys a ride
**.owner.c 			= 1

# Time duration of one Merry-Go-Round ride
**.merryGoRound.T 	= 120

**.childPool.bulkStat.result-recording-modes = -
**.childPool.interArrivalStat.result-recording-modes = -
**.childQueue.queueLengthStat.result-recording-modes = -vector


#-------------------------
#Consistency test
#-------------------------
[Config Validation_consistency_test]
extends = Validation

# Represents the time after which children start ot get tired of standing in queues.
**.childPool.Q 		= 700*3600

# The mean of exponential distribution ( unit of time [seconds] for dropping queue)
**.childPool.Delta	= 0

# Represents {6, 3} arrival(s) at minute. The mean of exponential distribution 
# ( unit of time [seconds] for next arrival, a.k.a inter-arrival time )
**.childPool.Lambda	= ${lambda = 10, 20}	

# Prob. of success. Mean = {1, 2} people at each arrival
**.childPool.P		= ${P = 1, 1/2 ! lambda} 


#-------------------------
#Degeneracy tests
#-------------------------
[Config Validation_degeneracy_test_Q_and_Delta_0]
extends = Validation
repeat = 1

# Represents the time after which children start ot get tired of standing in queues.
**.childPool.Q 		= 0

# The mean of exponential distribution ( unit of time [seconds] for dropping queue)
**.childPool.Delta	= 0


[Config Validation_degeneracy_test_N_0]
extends = Validation
repeat = 1

# Number of seats of the Merry-Go-Round 
**.owner.N 			= 0


[Config Validation_degeneracy_test_Lambda_0]
extends = Validation
cpu-time-limit = 30s
repeat = 1

# Represents infinite arrivals at minute. The mean of exponential distribution 
# ( unit of time [seconds] for next arrival, a.k.a inter-arrival time )
**.childPool.Lambda	= 0	


[Config Validation_degeneracy_test_T_0]
extends = Validation

# Represents the time after which children start ot get tired of standing in queues.
**.childPool.Q 		= ${Q = 300, 700*3600}

# Time duration of one Merry-Go-Round ride
**.merryGoRound.T 	= 0


#-------------------------
#Continuity tests
#-------------------------
[Config Validation_continuity_test_N]
extends = Validation
repeat = 1

# Number of seats of the Merry-Go-Round 
**.owner.N 			= ${N = 1..30 step 1}


[Config Validation_continuity_test_Delta]
extends = Validation

# Represents the time after which children start ot get tired of standing in queues.
**.childPool.Q 		= 180

# The mean of exponential distribution ( unit of time [seconds] for dropping queue)
**.childPool.Delta	= ${Delta = 175, 180, 185}


[Config Validation_continuity_test_Lambda]
extends = Validation

# Represents the arrivals at minute defining the mean of exponential distribution 
# ( unit of time [seconds] for next arrival, a.k.a inter-arrival time )
**.childPool.Lambda	= ${Lambda = 18, 20, 22}	


[Config Validation_continuity_test_T]
extends = Validation

# Time duration of one Merry-Go-Round ride
**.merryGoRound.T 	= ${T = 115, 120, 125}


[Config Validation_continuity_test_P]
extends = Validation

# Prob. of success. Mean of people at each arrival
**.childPool.P		= ${P = 0.45, 0.50, 0.55}


#----------------------------------
#Theoretical Model validation test
#----------------------------------
[Config Validation_M_D_1_model]
extends = Validation
repeat = 35
sim-time-limit = 3000h
warmup-period = 150h

# Number of seats of the Merry-Go-Round 
**.owner.N 			= 1

# Represents the time after which children start ot get tired of standing in queues.
**.childPool.Q 		= 3000*3600

# Represents {0.75, 0.6, 0.5} arrival(s) at minute. The mean of exponential distribution 
# ( unit of time [seconds] for next arrival, a.k.a inter-arrival time )
**.childPool.Lambda	= ${Lambda = 80, 100, 120}

# Time duration of one Merry-Go-Round ride
**.merryGoRound.T 	= 60




#--------------------------------------------------------------------------------------------
#CALIBRATION CONFIGURATIONS
#--------------------------------------------------------------------------------------------

#-------------------------
#Base test configuration
#-------------------------
[Config Calibration]
network = MGR_Network

# The mean of exponential distribution ( unit of time [seconds] for dropping queue)
**.childPool.Delta	= 300 

# Number of seats of the Merry-Go-Round 
**.owner.N 			= 24

# Time duration of one Merry-Go-Round ride
**.merryGoRound.T 	= ${T = 120, 300}

**.childPool.bulkStat.result-recording-modes = -
**.childPool.interArrivalStat.result-recording-modes = -
**.childQueue.queueQuitStat.result-recording-modes = -vector
**.childQueue.queueServedStat.result-recording-modes = -vector
**.childQueue.queueTotalStat.result-recording-modes = -vector


[Config Lambda_Calibration]
extends = Calibration
sim-time-limit = 700h
repeat = 35

# The mean of exponential distribution 
# ( unit of time [seconds] for next arrival, a.k.a inter-arrival time )
**.childPool.Lambda	= ${Lambda = 1..100 step 5, 100..400 step 20}

# Represents the time after which children start ot get tired of standing in queues.
# Respectively, in seconds, 7 minutes
**.childPool.Q 		= 420 	

# Prob. of success. Mean = 1 people at each arrival
**.childPool.P		= 1 

# Number of coin(s) earned for each child who enjoys a ride
**.owner.c 			= 1

# Threshold to start the Merry-Go-Round when it is not full
**.owner.v_fraction = ${vFraction = 0.25, 1}

**.merryGoRound.MGR_Utilization.result-recording-modes = -vector


[Config Warm-Up_Calibration]
extends = Calibration
sim-time-limit = ${limit= 50h, 100h, 200h, 700h} 
warmup-period = ${W= 0h, 1h, 2h, 5h, 10h, 15h}
repeat = 10

# Represents the time after which children start ot get tired of standing in queues.
# Respectively, in seconds, {3, 15} minutes
**.childPool.Q 		= ${Q = 180, 900} 

# Represents {3, 0.5, 0.75, 0.125} arrival(s) at minute. The mean of exponential distribution 
# ( unit of time [seconds] for next arrival, a.k.a inter-arrival time )
**.childPool.Lambda	= ${Lambda = 20, 120, 80, 480}	

# Prob. of success. Mean = {1, 4} people at each arrival
**.childPool.P		= ${P = 1, 1, 1/4, 1/4 ! Lambda} 

# Number of coin(s) earned for each child who enjoys a ride
**.owner.c 			= ${C = 1, 2 ! T}

# Threshold to start the Merry-Go-Round when it is not full
**.owner.v_fraction = ${vFraction = 0.25, 1}


[Config Sim-Time_Calibration]
extends = Calibration
sim-time-limit = 2000h 
warmup-period = 15h
repeat = 10

# Represents the time after which children start ot get tired of standing in queues.
# Respectively, in seconds, {3, 15} minutes
**.childPool.Q 		= ${Q = 180, 900} 

# Represents {3, 0.5, 0.75, 0.125} arrival(s) at minute. The mean of exponential distribution 
# ( unit of time [seconds] for next arrival, a.k.a inter-arrival time )
**.childPool.Lambda	= ${Lambda = 20, 120, 80, 480}	

# Prob. of success. Mean = {1, 4} people at each arrival
**.childPool.P		= ${P = 1, 1, 1/4, 1/4 ! Lambda} 

# Number of coin(s) earned for each child who enjoys a ride
**.owner.c 			= ${C = 1, 2 ! T}

# Threshold to start the Merry-Go-Round when it is not full
**.owner.v_fraction = ${vFraction = 0.25, 1}

**.childQueue.queueLengthStat.result-recording-modes = -vector


[Config Factorial_Analysis]
extends = Calibration
sim-time-limit = 650h 
warmup-period = 15h
repeat = 10

# Represents the time after which children start ot get tired of standing in queues.
# Respectively, in seconds, {3, 15} minutes
**.childPool.Q 		= ${Q = 180, 900} 

# Number of coin(s) earned for each child who enjoys a ride
**.owner.c 			= ${C = 1, 2 ! T}

**.childQueue.queueLengthStat.result-recording-modes = -vector
**.merryGoRound.MGR_Utilization.result-recording-modes = -vector
**.owner.throughput.result-recording-modes = -vector


[Config Factorial_Analysis_low_load_single]
extends = Factorial_Analysis

# Represents 0.5 arrival at minute. The mean of exponential distribution 
# ( unit of time [seconds] for next arrival, a.k.a inter-arrival time )
**.childPool.Lambda	= 120	

# Prob. of success. One person at each arrival
**.childPool.P		= 1 

# Threshold to start the Merry-Go-Round when it is not full
**.owner.v_fraction = ${vFraction = 0.125, 0.75}


[Config Factorial_Analysis_low_load_bulk]
extends = Factorial_Analysis

# Represents 0.125 arrival(s) at minute. The mean of exponential distribution 
# ( unit of time [seconds] for next arrival, a.k.a inter-arrival time )
**.childPool.Lambda	= 480	

# Prob. of success. Mean = 4 people at each arrival
**.childPool.P		= 1/4

# Threshold to start the Merry-Go-Round when it is not full
**.owner.v_fraction = ${vFraction = 0.125, 0.75}


[Config Factorial_Analysis_medium_load_single]
extends = Factorial_Analysis

# Represents 1 arrival at minute. The mean of exponential distribution 
# ( unit of time [seconds] for next arrival, a.k.a inter-arrival time )
**.childPool.Lambda	= 60	

# Prob. of success. One person at each arrival
**.childPool.P		= 1 

# Threshold to start the Merry-Go-Round when it is not full
**.owner.v_fraction = ${vFraction = 0.25, 1}


[Config Factorial_Analysis_medium_load_bulk]
extends = Factorial_Analysis

# Represents 0.25 arrival(s) at minute. The mean of exponential distribution 
# ( unit of time [seconds] for next arrival, a.k.a inter-arrival time )
**.childPool.Lambda	= 240	

# Prob. of success. Mean = 4 people at each arrival
**.childPool.P		= 1/4

# Threshold to start the Merry-Go-Round when it is not full
**.owner.v_fraction = ${vFraction = 0.25, 1}


[Config Factorial_Analysis_high_load_single]
extends = Factorial_Analysis

# Represents 3 arrivals at minute. The mean of exponential distribution 
# ( unit of time [seconds] for next arrival, a.k.a inter-arrival time )
**.childPool.Lambda	= 20	

# Prob. of success. One person at each arrival
**.childPool.P		= 1 

# Threshold to start the Merry-Go-Round when it is not full
**.owner.v_fraction = ${vFraction = 0.25, 1}


[Config Factorial_Analysis_high_load_bulk]
extends = Factorial_Analysis

# Represents 0.75 arrival(s) at minute. The mean of exponential distribution 
# ( unit of time [seconds] for next arrival, a.k.a inter-arrival time )
**.childPool.Lambda	= 80

# Prob. of success. Mean = 4 people at each arrival
**.childPool.P		= 1/4 

# Threshold to start the Merry-Go-Round when it is not full
**.owner.v_fraction = ${vFraction = 0.25, 1}


#--------------------------------------------------------------------------------------------
#EXPERIMENTS CONFIGURATIONS
#--------------------------------------------------------------------------------------------

[Config Base_Throughput_Optimization]
repeat = 35
network = MGR_Network
sim-time-limit = 650h 
warmup-period = 15h

# The mean of exponential distribution ( unit of time [seconds] for dropping queue)
**.childPool.Delta	= 300 

# Number of seats of the Merry-Go-Round 
**.owner.N 			= 24

# Number of coin(s) earned for each child who enjoys a ride
**.owner.c 			= 1

# Time duration of one Merry-Go-Round ride
**.merryGoRound.T 	= 210

# Represents the time after which children start ot get tired of standing in queues.
# Respectively, in seconds, [3, 15] minutes with a step of 1 minute
**.childPool.Q 		= ${Q = 180..900 step 60}

**.childPool.bulkStat.result-recording-modes = -
**.childPool.interArrivalStat.result-recording-modes = -
**.childQueue.queueQuitStat.result-recording-modes = -vector
**.childQueue.queueServedStat.result-recording-modes = -vector
**.childQueue.queueTotalStat.result-recording-modes = -vector
**.merryGoRound.MGR_Utilization.result-recording-modes = -vector
**.childQueue.queueLengthStat.result-recording-modes = -vector
**.owner.throughput.result-recording-modes = -vector


[Config Low_Load_Throughput_Optimization]
extends = Base_Throughput_Optimization

# Represents {0.5, 0.125} arrival(s) at minute. The mean of exponential distribution 
# ( unit of time [seconds] for next arrival, a.k.a inter-arrival time )
**.childPool.Lambda	= ${Lambda = 120, 480}

# Prob. of success. Mean = {1, 4} people at each arrival
**.childPool.P		= ${P = 1, 1/4 ! Lambda}

# Threshold to start the Merry-Go-Round when it is not full
**.owner.v_fraction = ${vFraction = 3/24, 4/24, 5/24, 6/24, 7/24, 8/24, 9/24, 10/24, 11/24, 12/24, 13/24, 14/24, 15/24}


[Config Medium_Load_Throughput_Optimization]
extends = Base_Throughput_Optimization

# Represents {1, 0.25} arrival(s) at minute. The mean of exponential distribution 
# ( unit of time [seconds] for next arrival, a.k.a inter-arrival time )
**.childPool.Lambda	= ${Lambda = 60, 240}

# Prob. of success. Mean = {1, 4} people at each arrival
**.childPool.P		= ${P = 1, 1/4 ! Lambda}

# Threshold to start the Merry-Go-Round when it is not full
**.owner.v_fraction = ${vFraction = 6/24, 8/24, 10/24, 12/24, 14/24, 16/24, 18/24, 20/24, 22/24, 1}
 

[Config High_Load_Throughput_Optimization]
extends = Base_Throughput_Optimization

# Represents {3, 0.75} arrival(s) at minute. The mean of exponential distribution 
# ( unit of time [seconds] for next arrival, a.k.a inter-arrival time )
**.childPool.Lambda	= ${Lambda = 20, 80}

# Prob. of success. Mean = {1, 4} people at each arrival
**.childPool.P		= ${P = 1, 1/4 ! Lambda}

# Threshold to start the Merry-Go-Round when it is not full
**.owner.v_fraction = ${vFraction = 6/24, 8/24, 10/24, 12/24, 14/24, 16/24, 18/24, 20/24, 22/24, 1}

[Config Base_Utilization_Optimization]
repeat = 35
network = MGR_Network
sim-time-limit = 650h 
warmup-period = 15h

# The mean of exponential distribution ( unit of time [seconds] for dropping queue)
**.childPool.Delta	= 300 

# Number of seats of the Merry-Go-Round 
**.owner.N 			= 24

# Number of coin(s) earned for each child who enjoys a ride
**.owner.c 			= 1

# Represents the time after which children start ot get tired of standing in queues.
# Respectively, in seconds, 9 minutes 
**.childPool.Q 		= 540

# Time duration of one Merry-Go-Round ride
**.merryGoRound.T 	= ${T = 120..300 step 30}

**.childPool.bulkStat.result-recording-modes = -
**.childPool.interArrivalStat.result-recording-modes = -
**.childQueue.queueQuitStat.result-recording-modes = -vector
**.childQueue.queueServedStat.result-recording-modes = -vector
**.childQueue.queueTotalStat.result-recording-modes = -vector
**.merryGoRound.MGR_Utilization.result-recording-modes = -vector
**.childQueue.queueLengthStat.result-recording-modes = -vector
**.owner.throughput.result-recording-modes = -vector


[Config Low_Load_Utilization_Optimization]
extends = Base_Utilization_Optimization

# Represents {0.5, 0.125} arrival(s) at minute. The mean of exponential distribution 
# ( unit of time [seconds] for next arrival, a.k.a inter-arrival time )
**.childPool.Lambda	= ${Lambda = 120, 480}

# Prob. of success. Mean = {1, 4} people at each arrival
**.childPool.P		= ${P = 1, 1/4 ! Lambda}

# Threshold to start the Merry-Go-Round when it is not full
**.owner.v_fraction = ${vFraction = 3/24, 4/24, 5/24, 6/24, 7/24, 8/24, 9/24, 10/24, 11/24, 12/24, 13/24, 14/24, 15/24}

[Config Medium_Load_Utilization_Optimization]
extends = Base_Utilization_Optimization

# Represents {1, 0.25} arrival(s) at minute. The mean of exponential distribution 
# ( unit of time [seconds] for next arrival, a.k.a inter-arrival time )
**.childPool.Lambda	= ${Lambda = 60, 240}

# Prob. of success. Mean = {1, 4} people at each arrival
**.childPool.P		= ${P = 1, 1/4 ! Lambda}

# Threshold to start the Merry-Go-Round when it is not full
**.owner.v_fraction = ${vFraction = 6/24, 8/24, 10/24, 12/24, 14/24, 16/24, 18/24, 20/24, 22/24, 1}

[Config High_Load_Utilization_Optimization]
extends = Base_Utilization_Optimization

# Represents {3, 0.75} arrival(s) at minute. The mean of exponential distribution 
# ( unit of time [seconds] for next arrival, a.k.a inter-arrival time )
**.childPool.Lambda	= ${Lambda = 20, 80}

# Prob. of success. Mean = {1, 4} people at each arrival
**.childPool.P		= ${P = 1, 1/4 ! Lambda}


# Threshold to start the Merry-Go-Round when it is not full
**.owner.v_fraction = ${vFraction = 6/24, 8/24, 10/24, 12/24, 14/24, 16/24, 18/24, 20/24, 22/24, 1}

